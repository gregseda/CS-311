// ====   For the dgraph.cpp file ====================================
// INSTRUCTION:
// Complete all the functions you listed in dgraph.h
// Comment the file completely using How to Comment file.
//=====================================

/* note that Gtable[i].adjacnentOnes is a slist, so you can use
   any slist function on it

Hint on filltable::

Set up fin stream to read from table.txt
while (fin >> Gtable[countUsed].vertexName)  // if I can read the name
{ fin >> Gtable[coutUsed].outDegree;
  // Then for the outDegree times do the following: (use a for-loop)
  {
     fin >> X;
     (Gtable[coutUsed].adjacentOnes).addRear(x); 
                      // this uses a slist function from HW3
  }//end of for
  // increment the countUsed
}//end of while
close fin

Hint on displaygraph::

Make the following couts better with labels.
for (int i = 0; i < coutUsed; i++}
{  
    cout << Gtable[i].vertexname << endl;
    cout << Gtable[i].outdegree << endl;
    (Gtable[i].adjacentOnes).displayAll();
}  

Instruction on findOutDegree and findAdjacency::

For this HW, you must use a loop.
Do not go through all the slots of the table
Just go through the used slots.

*/

/********************************************	   
HW#: HW6 graph
Name: Greg Seda
Compiler: g++ compiler
File Type: Directed Graph implementation file
************************************************/
#include "dgraph.h"
#include <iostream>
#include <fstream>				   

using namespace std;


//PURPOSE: Constructor that initialize the variables that will be used in the program
dgraph::dgraph()
{
  for(int i = 0; i < SIZE; i++)
    {
     Gtable[i].vertexName = ' ';
     Gtable[i].visit = 0;
    }
  countUsed = 0;
}
//PURPOSE: Destructor that will .........................
dgraph::~dgraph()
{
}
//PURPOSE: reads the input file (text.txt) and fills the table accordingly
void dgraph::fillTable()
{
  ifstream fin;
  el_t X;
  fin.open("table.txt");

  while(fin >> Gtable[countUsed].vertexName)
    {
      fin >> Gtable[countUsed].outDegree;
      
      for(int i = 0;i < Gtable[countUsed].outDegree;i++)
	{
	  fin >> X;
	  (Gtable[countUsed].adjacentOnes).addRear(X);
	}
      countUsed++;
    }
  fin.close();
}
//PURPOSE: displays every used slot in the table
void dgraph::displayGraph()
{
  for (int i = 0; i < countUsed; i++)
  {
    cout << "Vertex: " << Gtable[i].vertexName << endl;
    cout << "Out Degree: " << Gtable[i].outDegree << endl;

    cout << "Adjacent: ";
    (Gtable[i].adjacentOnes).displayAll();
    cout << endl;
  }
  
}
//PURPOSE: finds the out degree of the specific vertex given, if given a vertex that doesn't exist, then it throws it to BadVertex
//PARAMETERS: char ............
int dgraph::findOutDegree(char vertex)
{
  for(int i = 0; i < countUsed; i++)
    {
      if(Gtable[i].vertexName == vertex)
	{
	  return (Gtable[i].outDegree);
	}
    }
  throw BadVertex();
}
//PURPOSE: finds the adjacency list based on the given vertex, if given a vertex that doesn't exist, then it throws to BadVertex
//PARAMETERS: char ..........
slist dgraph::findAdjacency(char vertex)
{
  for(int i = 0; i < countUsed; i++)
    {
      if(Gtable[i].vertexName == vertex)
        {
          return (Gtable[i].adjacentOnes);
        }
    }
  throw BadVertex();
}
